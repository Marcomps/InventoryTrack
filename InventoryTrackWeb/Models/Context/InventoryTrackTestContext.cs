// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using InventoryTrackWeb.Models;

namespace InventoryTrackWeb.Models.Context
{
    public partial class InventoryTrackTestContext : DbContext
    {
        public InventoryTrackTestContext()
        {
        }

        public InventoryTrackTestContext(DbContextOptions<InventoryTrackTestContext> options)
            : base(options)
        {
        }

        public virtual DbSet<PreSale> PreSales { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Remuneration> Remunerations { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<Saler> Salers { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=LAP-039\\MARCOMENDEZ; Database=GemaInventoryTrackTest; Trusted_Connection=True;");
            }
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PreSale>(entity =>
            {
                entity.ToTable("PreSale");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PreSales)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_PreSale_Product");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.UnitCost).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.UnitCostSale).HasColumnType("decimal(9, 2)");
            });

            modelBuilder.Entity<Remuneration>(entity =>
            {
                entity.HasKey(e => e.RemuId);

                entity.ToTable("Remuneration");

                entity.Property(e => e.RemuId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.HasOne(d => d.Saler)
                    .WithMany(p => p.Remunerations)
                    .HasForeignKey(d => d.SalerId)
                    .HasConstraintName("FK_Remuneration_Saler");
            });

            modelBuilder.Entity<Sale>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.UnitCostSale).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Sales)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Sales_Product");
            });

            modelBuilder.Entity<Saler>(entity =>
            {
                entity.ToTable("Saler");

                entity.Property(e => e.SalerId).ValueGeneratedNever();

                entity.Property(e => e.SalerName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.TelefoneNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}